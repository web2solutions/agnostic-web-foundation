{
  "stats": {
    "suites": 7,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-24T04:41:53.484Z",
    "end": "2021-02-24T04:41:54.036Z",
    "duration": 552,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "76e3da4c-2565-485b-95f1-21a07e09fe6b",
      "title": "",
      "fullFile": "cypress/integration/utils_spec.js",
      "file": "cypress/integration/utils_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cd3c3ce5-4855-4b5a-bd2b-395a60c78247",
          "title": "#--- Utils module Test Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2330d133-9933-4788-a246-e61c5c113d43",
              "title": "Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "method signatures should have at least 2 data properties",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have at least 2 data properties",
                  "timedOut": null,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = 'fake error';\nvar _data = 'fake data';\nvar signature = utils.createMethodSignature(_error, _data);\n_assert[\"default\"].equal(Object.keys(signature).length, 2);\ndone();",
                  "err": {},
                  "uuid": "cc0cd8f4-03c1-4510-b7f5-4cf6262b3393",
                  "parentUUID": "2330d133-9933-4788-a246-e61c5c113d43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method signatures should have error and data properties",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have error and data properties",
                  "timedOut": null,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = 'fake error';\nvar _data = 'fake data';\nvar signature = utils.createMethodSignature(_error, _data);\n_assert[\"default\"].equal(signature.data, _data);\n_assert[\"default\"].equal(signature.error, _error);\ndone();",
                  "err": {},
                  "uuid": "f924ff01-062d-4c67-bc95-fbb09e6610a7",
                  "parentUUID": "2330d133-9933-4788-a246-e61c5c113d43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method signatures should have error and data properties even if you dont pass any parameter",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have error and data properties even if you dont pass any parameter",
                  "timedOut": null,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var signature = utils.createMethodSignature();\n_assert[\"default\"].equal(signature.data, null);\n_assert[\"default\"].equal(signature.error, null);\ndone();",
                  "err": {},
                  "uuid": "4d9c9d63-3d06-46f0-a52a-ed2129a9a18f",
                  "parentUUID": "2330d133-9933-4788-a246-e61c5c113d43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc0cd8f4-03c1-4510-b7f5-4cf6262b3393",
                "f924ff01-062d-4c67-bc95-fbb09e6610a7",
                "4d9c9d63-3d06-46f0-a52a-ed2129a9a18f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 66,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b1323fe7-0d69-4af2-a167-5c570e36e8c1",
              "title": "UUID: utils.uuid() -> Generate an Universally unique identifier string",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "uuid() must have 36 length",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string uuid() must have 36 length",
                  "timedOut": null,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var uuid1 = utils.uuid();\nvar uuid2 = utils.uuid();\n_assert[\"default\"].equal(uuid1.length, 36);\n_assert[\"default\"].equal(uuid2.length, 36);\ndone();",
                  "err": {},
                  "uuid": "3740d257-0cd2-45fa-b1ab-72a879b37067",
                  "parentUUID": "b1323fe7-0d69-4af2-a167-5c570e36e8c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid() getter must return a 36 bytes string",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string uuid() getter must return a 36 bytes string",
                  "timedOut": null,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var uuid1 = utils.uuid();\nvar bytes = new Blob([uuid1]).size;\n_assert[\"default\"].equal(bytes, 36);\ndone();",
                  "err": {},
                  "uuid": "b3d7ac20-f2f6-41b7-9f14-a60782882b07",
                  "parentUUID": "b1323fe7-0d69-4af2-a167-5c570e36e8c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Generates 10,000 uuids and check collisions",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string Generates 10,000 uuids and check collisions",
                  "timedOut": null,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var arr = [];\nfor (var x = 0; x <= 10000; x++) {\n  var uuid = utils.uuid();\n  arr.push(uuid);\n}\nvar map = arr.reduce(function (acc, e) {\n  return acc.set(e, (acc.get(e) || 0) + 1);\n}, new Map());\nvar oneOcurrency = 1;\nvar similars = (0, _toConsumableArray2[\"default\"])(map.values()).filter(function (value) {\n  return value > oneOcurrency;\n}).length;\n_assert[\"default\"].equal(similars, 0);\ndone();",
                  "err": {},
                  "uuid": "6d691eb5-1ebc-4f40-9a0d-0c8ffe68e5da",
                  "parentUUID": "b1323fe7-0d69-4af2-a167-5c570e36e8c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3740d257-0cd2-45fa-b1ab-72a879b37067",
                "b3d7ac20-f2f6-41b7-9f14-a60782882b07",
                "6d691eb5-1ebc-4f40-9a0d-0c8ffe68e5da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 76,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac00c119-1b02-49fc-beb2-a4653a95d5bd",
              "title": "toJSON: utils.toJSON(string|object) -> stringify and parse an object",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "toJSON() must support Strings",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() must support Strings",
                  "timedOut": null,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var obj = '{ \"name\": \"eduardo\" }';\nvar json = utils.toJSON(obj);\n_assert[\"default\"].equal(json.name, 'eduardo');\ndone();",
                  "err": {},
                  "uuid": "b9a24916-ed50-4d50-aa48-c39b7b270d94",
                  "parentUUID": "ac00c119-1b02-49fc-beb2-a4653a95d5bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "toJSON() Strings must be valid JSON string",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() Strings must be valid JSON string",
                  "timedOut": null,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var obj = '{ name: \"eduardo\" }';\nvar json = {};\ntry {\n  json = utils.toJSON(obj);\n} catch (error) {\n  json = {};\n}\n_assert[\"default\"].notEqual(json.name, 'eduardo');\ndone();",
                  "err": {},
                  "uuid": "a516fe84-ef0b-4e0a-ac83-902d99808f14",
                  "parentUUID": "ac00c119-1b02-49fc-beb2-a4653a95d5bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "toJSON() must support Object",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() must support Object",
                  "timedOut": null,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var obj = {\n  name: 'eduardo'\n};\nvar json = utils.toJSON(obj);\n_assert[\"default\"].equal(json.name, 'eduardo');\ndone();",
                  "err": {},
                  "uuid": "c9b3494b-e70b-433c-862a-f45531360983",
                  "parentUUID": "ac00c119-1b02-49fc-beb2-a4653a95d5bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9a24916-ed50-4d50-aa48-c39b7b270d94",
                "a516fe84-ef0b-4e0a-ac83-902d99808f14",
                "c9b3494b-e70b-433c-862a-f45531360983"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 36,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "597c5238-f6a2-4740-9989-402b76a087d1",
              "title": "genDbName: utils.genDbName(string) -> genDbName",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "genDbName() must return a string",
                  "fullTitle": "#--- Utils module Test Suite genDbName: utils.genDbName(string) -> genDbName genDbName() must return a string",
                  "timedOut": null,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var dbName = utils.genDbName();\n_assert[\"default\"].equal(typeof dbName === 'string', true);\ndone();",
                  "err": {},
                  "uuid": "66cc6a9e-7dc1-427d-8d0d-0fa4ad26f0ce",
                  "parentUUID": "597c5238-f6a2-4740-9989-402b76a087d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "genDbName(\"\") must return a string",
                  "fullTitle": "#--- Utils module Test Suite genDbName: utils.genDbName(string) -> genDbName genDbName(\"\") must return a string",
                  "timedOut": null,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appName = '';\nvar dbName = utils.genDbName(appName);\n_assert[\"default\"].equal(typeof dbName === 'string', true);\ndone();",
                  "err": {},
                  "uuid": "f09adad7-781c-46ec-a61c-0eb7e3f0ed6f",
                  "parentUUID": "597c5238-f6a2-4740-9989-402b76a087d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "genDbName(My App) must return VooduX_my_app",
                  "fullTitle": "#--- Utils module Test Suite genDbName: utils.genDbName(string) -> genDbName genDbName(My App) must return VooduX_my_app",
                  "timedOut": null,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appName = 'My App';\nvar dbName = utils.genDbName(appName);\n_assert[\"default\"].equal(typeof dbName === 'string', true);\n_assert[\"default\"].equal(dbName, 'VooduX_my_app');\ndone();",
                  "err": {},
                  "uuid": "2170f21b-c653-4460-8bf1-4131b4fc2bc5",
                  "parentUUID": "597c5238-f6a2-4740-9989-402b76a087d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66cc6a9e-7dc1-427d-8d0d-0fa4ad26f0ce",
                "f09adad7-781c-46ec-a61c-0eb7e3f0ed6f",
                "2170f21b-c653-4460-8bf1-4131b4fc2bc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 47,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d4563f9-3f0b-450c-a78b-0d2121b72a2d",
              "title": "Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Table config must have __id as Primary Key",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config Table config must have __id as Primary Key",
                  "timedOut": null,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tableConfigArray = tableConfig.split(',');\n_assert[\"default\"].equal(tableConfigArray[0], '++__id');\ndone();",
                  "err": {},
                  "uuid": "ae8aa7c3-87e3-4eb4-9ca3-48a9bba090c1",
                  "parentUUID": "1d4563f9-3f0b-450c-a78b-0d2121b72a2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Table config must have _id ",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config Table config must have _id ",
                  "timedOut": null,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tableConfigArray = tableConfig.split(',');\n_assert[\"default\"].equal(tableConfigArray[1], '_id');\ndone();",
                  "err": {},
                  "uuid": "3e32d500-5dae-413a-b715-173c91ea2c1c",
                  "parentUUID": "1d4563f9-3f0b-450c-a78b-0d2121b72a2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cards property must be multi entry",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config cards property must be multi entry",
                  "timedOut": null,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tableConfigArray = tableConfig.split(',');\nvar foundMultiEntry = false;\ntableConfigArray.forEach(function (propertyName) {\n  if (propertyName === '*cards') {\n    foundMultiEntry = true;\n  }\n});\n_assert[\"default\"].equal(foundMultiEntry, true);\ndone();",
                  "err": {},
                  "uuid": "83f2c9a2-205d-42bf-97f2-2b482950a0e5",
                  "parentUUID": "1d4563f9-3f0b-450c-a78b-0d2121b72a2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "notIndexed property shall not be present on table config because it is not indexed",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config notIndexed property shall not be present on table config because it is not indexed",
                  "timedOut": null,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tableConfigArray = tableConfig.split(',');\nvar foundnotIndexed = false;\ntableConfigArray.forEach(function (propertyName) {\n  if (propertyName === 'notIndexed') {\n    foundnotIndexed = true;\n  }\n});\n_assert[\"default\"].equal(foundnotIndexed, false);\ndone();",
                  "err": {},
                  "uuid": "b8f07b54-de70-4fca-8162-cfbf51ff5971",
                  "parentUUID": "1d4563f9-3f0b-450c-a78b-0d2121b72a2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae8aa7c3-87e3-4eb4-9ca3-48a9bba090c1",
                "3e32d500-5dae-413a-b715-173c91ea2c1c",
                "83f2c9a2-205d-42bf-97f2-2b482950a0e5",
                "b8f07b54-de70-4fca-8162-cfbf51ff5971"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 70,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f286abd2-abac-48f9-b3ca-219e8af42427",
              "title": "lunr search token generating",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Returned token must be an array",
                  "fullTitle": "#--- Utils module Test Suite lunr search token generating Returned token must be an array",
                  "timedOut": null,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = null;\nvar _data = null;\ntry {\n  var text = 'text goes here';\n  var token = utils.getSearchTokenStream(text);\n  _data = token;\n} catch (e) {\n  console.log(e);\n  _error = e;\n  _data = null;\n}\n_assert[\"default\"].equal(Array.isArray(_data), true);\ndone();",
                  "err": {},
                  "uuid": "017bf748-fab0-43b1-9e78-7223ae794dd8",
                  "parentUUID": "f286abd2-abac-48f9-b3ca-219e8af42427",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Returned token must have 3 entries",
                  "fullTitle": "#--- Utils module Test Suite lunr search token generating Returned token must have 3 entries",
                  "timedOut": null,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = null;\nvar _data = null;\ntry {\n  var text = 'text goes here';\n  var token = utils.getSearchTokenStream(text);\n  _data = token;\n} catch (e) {\n  console.log(e);\n  _error = e;\n  _data = null;\n}\n_assert[\"default\"].equal(_data.length, 3);\ndone();",
                  "err": {},
                  "uuid": "2c31fb0d-e67e-4980-9f47-5fff36e2b036",
                  "parentUUID": "f286abd2-abac-48f9-b3ca-219e8af42427",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Returned token must have 0 entries",
                  "fullTitle": "#--- Utils module Test Suite lunr search token generating Returned token must have 0 entries",
                  "timedOut": null,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = null;\nvar _data = null;\ntry {\n  var text = '';\n  var token = utils.getSearchTokenStream(text);\n  _data = token;\n} catch (e) {\n  console.log(e);\n  _error = e;\n  _data = null;\n}\n_assert[\"default\"].equal(_data.length, 0);\ndone();",
                  "err": {},
                  "uuid": "60e60d51-1b13-44e5-8607-595107d121c1",
                  "parentUUID": "f286abd2-abac-48f9-b3ca-219e8af42427",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "017bf748-fab0-43b1-9e78-7223ae794dd8",
                "2c31fb0d-e67e-4980-9f47-5fff36e2b036",
                "60e60d51-1b13-44e5-8607-595107d121c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "docs/reports/unit-testing",
        "overwrite": false,
        "reportTitle": "My Custom Title",
        "showPassed": true,
        "html": false,
        "json": true
      },
      "version": "5.1.0"
    }
  }
}