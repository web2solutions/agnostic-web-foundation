{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 9,
    "pending": 0,
    "failures": 1,
    "start": "2021-02-11T05:02:30.794Z",
    "end": "2021-02-11T05:02:36.193Z",
    "duration": 5399,
    "testsRegistered": 10,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "12f02473-a8be-419f-a9d7-f10a7e67324d",
      "title": "",
      "fullFile": "cypress/integration/utils_spec.js",
      "file": "cypress/integration/utils_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6ca0ccf3-2c89-45db-8e66-2911908db33b",
          "title": "#--- Utils module Test Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "90b2e596-3c78-4270-b25a-5e6f2baca7ee",
              "title": "Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "method signatures should have at least 2 data properties",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have at least 2 data properties",
                  "timedOut": null,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_ikkexy0ff().f[2]++;\nvar _error = (cov_ikkexy0ff().s[3]++, 'fake error');\nvar _data = (cov_ikkexy0ff().s[4]++, 'fake data');\nvar signature = (cov_ikkexy0ff().s[5]++, utils.createMethodSignature(_error, _data));\ncov_ikkexy0ff().s[6]++;\n_assert[\"default\"].equal(Object.keys(signature).length, 2);\ncov_ikkexy0ff().s[7]++;\ndone();",
                  "err": {},
                  "uuid": "f6523cd1-43ad-4831-860c-05add4fe61c0",
                  "parentUUID": "90b2e596-3c78-4270-b25a-5e6f2baca7ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method signatures should have error and data properties",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have error and data properties",
                  "timedOut": null,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_ikkexy0ff().f[3]++;\nvar _error = (cov_ikkexy0ff().s[9]++, 'fake error');\nvar _data = (cov_ikkexy0ff().s[10]++, 'fake data');\nvar signature = (cov_ikkexy0ff().s[11]++, utils.createMethodSignature(_error, _data));\ncov_ikkexy0ff().s[12]++;\n_assert[\"default\"].equal(signature.data, _data);\ncov_ikkexy0ff().s[13]++;\n_assert[\"default\"].equal(signature.error, _error);\ncov_ikkexy0ff().s[14]++;\ndone();",
                  "err": {},
                  "uuid": "f28e2b00-552a-4dc7-8c61-6cbf9774b6ac",
                  "parentUUID": "90b2e596-3c78-4270-b25a-5e6f2baca7ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method signatures should have error and data properties even if you dont pass any parameter",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have error and data properties even if you dont pass any parameter",
                  "timedOut": null,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_ikkexy0ff().f[4]++;\nvar signature = (cov_ikkexy0ff().s[16]++, utils.createMethodSignature());\ncov_ikkexy0ff().s[17]++;\n_assert[\"default\"].equal(signature.data, null);\ncov_ikkexy0ff().s[18]++;\n_assert[\"default\"].equal(signature.error, null);\ncov_ikkexy0ff().s[19]++;\ndone();",
                  "err": {},
                  "uuid": "c02df2ed-f6c3-4ae5-bcf0-3088e5da37bf",
                  "parentUUID": "90b2e596-3c78-4270-b25a-5e6f2baca7ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6523cd1-43ad-4831-860c-05add4fe61c0",
                "f28e2b00-552a-4dc7-8c61-6cbf9774b6ac",
                "c02df2ed-f6c3-4ae5-bcf0-3088e5da37bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 64,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "95a641d8-9711-4872-8fb2-e09592ccba84",
              "title": "UUID: utils.uuid() -> Generate an Universally unique identifier string",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "uuid() must have 36 length",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string uuid() must have 36 length",
                  "timedOut": null,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_ikkexy0ff().f[6]++;\nvar uuid1 = (cov_ikkexy0ff().s[22]++, utils.uuid());\nvar uuid2 = (cov_ikkexy0ff().s[23]++, utils.uuid());\ncov_ikkexy0ff().s[24]++;\n_assert[\"default\"].equal(uuid1.length, 36);\ncov_ikkexy0ff().s[25]++;\n_assert[\"default\"].equal(uuid2.length, 36);\ncov_ikkexy0ff().s[26]++;\ndone();",
                  "err": {},
                  "uuid": "dbca4c2e-b7d1-46b3-872a-855e24e5ea10",
                  "parentUUID": "95a641d8-9711-4872-8fb2-e09592ccba84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid() getter must return a 36 bytes string",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string uuid() getter must return a 36 bytes string",
                  "timedOut": null,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_ikkexy0ff().f[7]++;\nvar uuid1 = (cov_ikkexy0ff().s[28]++, utils.uuid());\nvar bytes = (cov_ikkexy0ff().s[29]++, new Blob([uuid1]).size);\ncov_ikkexy0ff().s[30]++;\n_assert[\"default\"].equal(bytes, 36);\ncov_ikkexy0ff().s[31]++;\ndone();",
                  "err": {},
                  "uuid": "e419b34d-b581-4ea3-adf4-92e2bac95726",
                  "parentUUID": "95a641d8-9711-4872-8fb2-e09592ccba84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Generates 10,000 uuids and check collisions",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string Generates 10,000 uuids and check collisions",
                  "timedOut": null,
                  "duration": 77,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_ikkexy0ff().f[8]++;\nvar arr = (cov_ikkexy0ff().s[33]++, []);\ncov_ikkexy0ff().s[34]++;\nfor (var x = (cov_ikkexy0ff().s[35]++, 0); x <= 10000; x++) {\n  var uuid = (cov_ikkexy0ff().s[36]++, utils.uuid());\n  cov_ikkexy0ff().s[37]++;\n  arr.push(uuid);\n}\nvar map = (cov_ikkexy0ff().s[38]++, arr.reduce(function (acc, e) {\n  cov_ikkexy0ff().f[9]++;\n  cov_ikkexy0ff().s[39]++;\n  return acc.set(e, ((cov_ikkexy0ff().b[0][0]++, acc.get(e)) || (cov_ikkexy0ff().b[0][1]++, 0)) + 1);\n}, new Map()));\nvar oneOcurrency = (cov_ikkexy0ff().s[40]++, 1);\nvar similars = (cov_ikkexy0ff().s[41]++, (0, _toConsumableArray2[\"default\"])(map.values()).filter(function (value) {\n  cov_ikkexy0ff().f[10]++;\n  cov_ikkexy0ff().s[42]++;\n  return value > oneOcurrency;\n}).length);\ncov_ikkexy0ff().s[43]++;\n_assert[\"default\"].equal(similars, 0);\ncov_ikkexy0ff().s[44]++;\ndone();",
                  "err": {},
                  "uuid": "de3bb2a9-2f7d-471e-a4ae-c0b0b63761a5",
                  "parentUUID": "95a641d8-9711-4872-8fb2-e09592ccba84",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbca4c2e-b7d1-46b3-872a-855e24e5ea10",
                "e419b34d-b581-4ea3-adf4-92e2bac95726",
                "de3bb2a9-2f7d-471e-a4ae-c0b0b63761a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 144,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fbf166e3-c79b-43ce-8ad7-5f80b8fde33d",
              "title": "toJSON: utils.toJSON(string|object) -> stringify and parse an object",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "toJSON() must support Strings",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() must support Strings",
                  "timedOut": null,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_ikkexy0ff().f[12]++;\nvar obj = (cov_ikkexy0ff().s[47]++, '{ \"name\": \"eduardo\" }');\nvar json = (cov_ikkexy0ff().s[48]++, utils.toJSON(obj));\ncov_ikkexy0ff().s[49]++;\n_assert[\"default\"].equal(json.name, 'eduardo');\ncov_ikkexy0ff().s[50]++;\ndone();",
                  "err": {},
                  "uuid": "c9b6f8bd-0b68-4ef1-b4c8-f02df0d79ce7",
                  "parentUUID": "fbf166e3-c79b-43ce-8ad7-5f80b8fde33d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "toJSON() Strings must be valid JSON string",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() Strings must be valid JSON string",
                  "timedOut": null,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_ikkexy0ff().f[13]++;\nvar obj = (cov_ikkexy0ff().s[52]++, '{ name: \"eduardo\" }');\nvar json = (cov_ikkexy0ff().s[53]++, {});\ncov_ikkexy0ff().s[54]++;\ntry {\n  cov_ikkexy0ff().s[55]++;\n  json = utils.toJSON(obj);\n} catch (error) {\n  cov_ikkexy0ff().s[56]++;\n  json = {};\n}\ncov_ikkexy0ff().s[57]++;\n_assert[\"default\"].notEqual(json.name, 'eduardo');\ncov_ikkexy0ff().s[58]++;\ndone();",
                  "err": {},
                  "uuid": "9491874b-9add-4a6d-b3fa-4e32dd789f4c",
                  "parentUUID": "fbf166e3-c79b-43ce-8ad7-5f80b8fde33d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "toJSON() must support Object",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() must support Object",
                  "timedOut": null,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_ikkexy0ff().f[14]++;\nvar obj = (cov_ikkexy0ff().s[60]++, {\n  name: 'eduardo'\n});\nvar json = (cov_ikkexy0ff().s[61]++, utils.toJSON(obj));\ncov_ikkexy0ff().s[62]++;\n_assert[\"default\"].equal(json.name, 'eduardo');\ncov_ikkexy0ff().s[63]++;\ndone();",
                  "err": {},
                  "uuid": "931376c3-9416-4788-8302-1d760493a803",
                  "parentUUID": "fbf166e3-c79b-43ce-8ad7-5f80b8fde33d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9b6f8bd-0b68-4ef1-b4c8-f02df0d79ce7",
                "9491874b-9add-4a6d-b3fa-4e32dd789f4c",
                "931376c3-9416-4788-8302-1d760493a803"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 32,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "585be3e8-c9f1-4929-8b40-51af5776735f",
              "title": "Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Table config must have __id as Primary Key",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config Table config must have __id as Primary Key",
                  "timedOut": null,
                  "duration": 4553,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cov_ikkexy0ff().f[16]++;\nvar schema = (cov_ikkexy0ff().s[66]++, new utils.Schema({\n  name: {\n    type: String,\n    required: true,\n    index: true\n  },\n  username: {\n    type: String,\n    required: true,\n    index: true\n  }\n}));\nvar tableConfig = (cov_ikkexy0ff().s[67]++, utils.mongooseToDexieTableString(schema));\nvar tableConfigArray = (cov_ikkexy0ff().s[68]++, tableConfig.split(','));\ncov_ikkexy0ff().s[69]++;\n_assert[\"default\"].equal(tableConfigArray[0], '++__id');\ncov_ikkexy0ff().s[70]++;\ndone();",
                  "err": {
                    "message": "CypressError: Cypress command timeout of `4000ms` exceeded.\n\nBecause this error occurred during a `after all` hook we are skipping all of the remaining tests.",
                    "estack": "CypressError: Cypress command timeout of `4000ms` exceeded.\n\nBecause this error occurred during a `after all` hook we are skipping all of the remaining tests.\n    at cypressErr (http://localhost:60769/__cypress/runner/cypress_runner.js:173286:18)\n    at Object.errByPath (http://localhost:60769/__cypress/runner/cypress_runner.js:173337:10)\n    at http://localhost:60769/__cypress/runner/cypress_runner.js:174938:29",
                    "diff": null
                  },
                  "uuid": "49ef72ec-256e-463d-84f1-746645feddf7",
                  "parentUUID": "585be3e8-c9f1-4929-8b40-51af5776735f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "49ef72ec-256e-463d-84f1-746645feddf7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4553,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index.html",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "docs/reports/unit-testing",
        "overwrite": true,
        "reportTitle": "My Custom Title",
        "showPassed": true,
        "html": true,
        "json": true,
        "charts": true,
        "reportFilename": "index.html"
      },
      "version": "5.1.0"
    }
  }
}