{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-09T15:11:53.956Z",
    "end": "2021-02-09T15:11:55.483Z",
    "duration": 1527,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "31da5e12-2915-439f-87c2-e71c05c15a13",
      "title": "",
      "fullFile": "cypress/integration/utils_spec.js",
      "file": "cypress/integration/utils_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1c6f9c5d-ea4f-469b-bf48-d3d17abc3359",
          "title": "#--- Utils module Test Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b7e40c53-7ffe-4955-b972-fce272791a64",
              "title": "Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "method signatures should have at least 2 data properties",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have at least 2 data properties",
                  "timedOut": null,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_2ga4hjopb5().f[2]++;\nvar _error = (cov_2ga4hjopb5().s[3]++, 'fake error');\nvar _data = (cov_2ga4hjopb5().s[4]++, 'fake data');\nvar signature = (cov_2ga4hjopb5().s[5]++, utils.createMethodSignature(_error, _data));\ncov_2ga4hjopb5().s[6]++;\n_assert[\"default\"].equal(Object.keys(signature).length, 2);\ncov_2ga4hjopb5().s[7]++;\ndone();",
                  "err": {},
                  "uuid": "31f8a4dc-323b-4b65-aaa8-da6eb8eb2cd2",
                  "parentUUID": "b7e40c53-7ffe-4955-b972-fce272791a64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method signatures should have error and data properties",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have error and data properties",
                  "timedOut": null,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_2ga4hjopb5().f[3]++;\nvar _error = (cov_2ga4hjopb5().s[9]++, 'fake error');\nvar _data = (cov_2ga4hjopb5().s[10]++, 'fake data');\nvar signature = (cov_2ga4hjopb5().s[11]++, utils.createMethodSignature(_error, _data));\ncov_2ga4hjopb5().s[12]++;\n_assert[\"default\"].equal(signature.data, _data);\ncov_2ga4hjopb5().s[13]++;\n_assert[\"default\"].equal(signature.error, _error);\ncov_2ga4hjopb5().s[14]++;\ndone();",
                  "err": {},
                  "uuid": "fa81f8ea-9420-4d64-b5b8-1d8dfb048567",
                  "parentUUID": "b7e40c53-7ffe-4955-b972-fce272791a64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method signatures should have error and data properties even if you dont pass any parameter",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have error and data properties even if you dont pass any parameter",
                  "timedOut": null,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_2ga4hjopb5().f[4]++;\nvar signature = (cov_2ga4hjopb5().s[16]++, utils.createMethodSignature());\ncov_2ga4hjopb5().s[17]++;\n_assert[\"default\"].equal(signature.data, null);\ncov_2ga4hjopb5().s[18]++;\n_assert[\"default\"].equal(signature.error, null);\ncov_2ga4hjopb5().s[19]++;\ndone();",
                  "err": {},
                  "uuid": "88979dbe-0a97-43d3-9f1f-99b76802777b",
                  "parentUUID": "b7e40c53-7ffe-4955-b972-fce272791a64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31f8a4dc-323b-4b65-aaa8-da6eb8eb2cd2",
                "fa81f8ea-9420-4d64-b5b8-1d8dfb048567",
                "88979dbe-0a97-43d3-9f1f-99b76802777b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 70,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cfd21187-8c04-47a4-88e7-9da87171b37c",
              "title": "UUID: utils.uuid() -> Generate an Universally unique identifier string",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "uuid() must have 36 length",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string uuid() must have 36 length",
                  "timedOut": null,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_2ga4hjopb5().f[6]++;\nvar uuid1 = (cov_2ga4hjopb5().s[22]++, utils.uuid());\nvar uuid2 = (cov_2ga4hjopb5().s[23]++, utils.uuid());\ncov_2ga4hjopb5().s[24]++;\n_assert[\"default\"].equal(uuid1.length, 36);\ncov_2ga4hjopb5().s[25]++;\n_assert[\"default\"].equal(uuid2.length, 36);\ncov_2ga4hjopb5().s[26]++;\ndone();",
                  "err": {},
                  "uuid": "603e19a3-4054-4dc9-be22-eab389995d38",
                  "parentUUID": "cfd21187-8c04-47a4-88e7-9da87171b37c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid() getter must return a 36 bytes string",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string uuid() getter must return a 36 bytes string",
                  "timedOut": null,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_2ga4hjopb5().f[7]++;\nvar uuid1 = (cov_2ga4hjopb5().s[28]++, utils.uuid());\nvar bytes = (cov_2ga4hjopb5().s[29]++, new Blob([uuid1]).size);\ncov_2ga4hjopb5().s[30]++;\n_assert[\"default\"].equal(bytes, 36);\ncov_2ga4hjopb5().s[31]++;\ndone();",
                  "err": {},
                  "uuid": "85066201-6140-42a5-9793-7030b7d498c5",
                  "parentUUID": "cfd21187-8c04-47a4-88e7-9da87171b37c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Generates 10,000 uuids and check collisions",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string Generates 10,000 uuids and check collisions",
                  "timedOut": null,
                  "duration": 80,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_2ga4hjopb5().f[8]++;\nvar arr = (cov_2ga4hjopb5().s[33]++, []);\ncov_2ga4hjopb5().s[34]++;\nfor (var x = (cov_2ga4hjopb5().s[35]++, 0); x <= 10000; x++) {\n  var uuid = (cov_2ga4hjopb5().s[36]++, utils.uuid());\n  cov_2ga4hjopb5().s[37]++;\n  arr.push(uuid);\n}\nvar map = (cov_2ga4hjopb5().s[38]++, arr.reduce(function (acc, e) {\n  cov_2ga4hjopb5().f[9]++;\n  cov_2ga4hjopb5().s[39]++;\n  return acc.set(e, ((cov_2ga4hjopb5().b[0][0]++, acc.get(e)) || (cov_2ga4hjopb5().b[0][1]++, 0)) + 1);\n}, new Map()));\nvar oneOcurrency = (cov_2ga4hjopb5().s[40]++, 1);\nvar similars = (cov_2ga4hjopb5().s[41]++, (0, _toConsumableArray2[\"default\"])(map.values()).filter(function (value) {\n  cov_2ga4hjopb5().f[10]++;\n  cov_2ga4hjopb5().s[42]++;\n  return value > oneOcurrency;\n}).length);\ncov_2ga4hjopb5().s[43]++;\n_assert[\"default\"].equal(similars, 0);\ncov_2ga4hjopb5().s[44]++;\ndone();",
                  "err": {},
                  "uuid": "2ed82fae-5575-4f4d-ab42-f35f822e60fb",
                  "parentUUID": "cfd21187-8c04-47a4-88e7-9da87171b37c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "603e19a3-4054-4dc9-be22-eab389995d38",
                "85066201-6140-42a5-9793-7030b7d498c5",
                "2ed82fae-5575-4f4d-ab42-f35f822e60fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 98,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2ca714c9-06c4-4097-a73c-212e6061badc",
              "title": "toJSON: utils.toJSON(string|object) -> stringify and parse an object",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "toJSON() must support Strings",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() must support Strings",
                  "timedOut": null,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_2ga4hjopb5().f[12]++;\nvar obj = (cov_2ga4hjopb5().s[47]++, '{ \"name\": \"eduardo\" }');\nvar json = (cov_2ga4hjopb5().s[48]++, utils.toJSON(obj));\ncov_2ga4hjopb5().s[49]++;\n_assert[\"default\"].equal(json.name, 'eduardo');\ncov_2ga4hjopb5().s[50]++;\ndone();",
                  "err": {},
                  "uuid": "be74373b-230c-4c42-a4d6-5fe5b3a180e9",
                  "parentUUID": "2ca714c9-06c4-4097-a73c-212e6061badc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "toJSON() Strings must be valid JSON string",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() Strings must be valid JSON string",
                  "timedOut": null,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_2ga4hjopb5().f[13]++;\nvar obj = (cov_2ga4hjopb5().s[52]++, '{ name: \"eduardo\" }');\nvar json = (cov_2ga4hjopb5().s[53]++, {});\ncov_2ga4hjopb5().s[54]++;\ntry {\n  cov_2ga4hjopb5().s[55]++;\n  json = utils.toJSON(obj);\n} catch (error) {\n  cov_2ga4hjopb5().s[56]++;\n  json = {};\n}\ncov_2ga4hjopb5().s[57]++;\n_assert[\"default\"].notEqual(json.name, 'eduardo');\ncov_2ga4hjopb5().s[58]++;\ndone();",
                  "err": {},
                  "uuid": "3a7e4a4e-abb4-40d6-9a4f-e9885b130889",
                  "parentUUID": "2ca714c9-06c4-4097-a73c-212e6061badc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "toJSON() must support Object",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() must support Object",
                  "timedOut": null,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_2ga4hjopb5().f[14]++;\nvar obj = (cov_2ga4hjopb5().s[60]++, {\n  name: 'eduardo'\n});\nvar json = (cov_2ga4hjopb5().s[61]++, utils.toJSON(obj));\ncov_2ga4hjopb5().s[62]++;\n_assert[\"default\"].equal(json.name, 'eduardo');\ncov_2ga4hjopb5().s[63]++;\ndone();",
                  "err": {},
                  "uuid": "2e6abf44-3f21-4425-b291-f06e5a4b4906",
                  "parentUUID": "2ca714c9-06c4-4097-a73c-212e6061badc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be74373b-230c-4c42-a4d6-5fe5b3a180e9",
                "3a7e4a4e-abb4-40d6-9a4f-e9885b130889",
                "2e6abf44-3f21-4425-b291-f06e5a4b4906"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 35,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1767ca9a-c888-4c6a-ad15-69a24a6e141d",
              "title": "Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Table config must have __id as Primary Key",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config Table config must have __id as Primary Key",
                  "timedOut": null,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cov_2ga4hjopb5().f[16]++;\nvar schema = (cov_2ga4hjopb5().s[66]++, new utils.Schema({\n  name: {\n    type: String,\n    required: true,\n    index: true\n  },\n  username: {\n    type: String,\n    required: true,\n    index: true\n  }\n}));\nvar tableConfig = (cov_2ga4hjopb5().s[67]++, utils.mongooseToDexieTableString(schema));\nvar tableConfigArray = (cov_2ga4hjopb5().s[68]++, tableConfig.split(','));\ncov_2ga4hjopb5().s[69]++;\n_assert[\"default\"].equal(tableConfigArray[0], '++__id');\ncov_2ga4hjopb5().s[70]++;\ndone();",
                  "err": {},
                  "uuid": "a2fb4144-965b-4e1e-81af-7ea4f086a354",
                  "parentUUID": "1767ca9a-c888-4c6a-ad15-69a24a6e141d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2fb4144-965b-4e1e-81af-7ea4f086a354"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index.html",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "docs/reports/unit-testing",
        "overwrite": true,
        "reportTitle": "My Custom Title",
        "showPassed": true,
        "html": true,
        "json": true,
        "reportFilename": "index.html"
      },
      "version": "5.1.0"
    }
  }
}