{
  "stats": {
    "suites": 6,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-14T03:04:41.945Z",
    "end": "2021-02-14T03:04:42.455Z",
    "duration": 510,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "47e873b6-cda2-44c3-b55d-0b67de991a51",
      "title": "",
      "fullFile": "cypress/integration/utils_spec.js",
      "file": "cypress/integration/utils_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f75ef78d-58f2-4903-80de-4597f21edb88",
          "title": "#--- Utils module Test Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8ba5c2fa-9477-4edf-828f-47e5856f01f0",
              "title": "Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "method signatures should have at least 2 data properties",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have at least 2 data properties",
                  "timedOut": null,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = 'fake error';\nvar _data = 'fake data';\nvar signature = utils.createMethodSignature(_error, _data);\n_assert[\"default\"].equal(Object.keys(signature).length, 2);\ndone();",
                  "err": {},
                  "uuid": "cd7db7c1-d490-4895-bf7a-4e2c3661e3fb",
                  "parentUUID": "8ba5c2fa-9477-4edf-828f-47e5856f01f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method signatures should have error and data properties",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have error and data properties",
                  "timedOut": null,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = 'fake error';\nvar _data = 'fake data';\nvar signature = utils.createMethodSignature(_error, _data);\n_assert[\"default\"].equal(signature.data, _data);\n_assert[\"default\"].equal(signature.error, _error);\ndone();",
                  "err": {},
                  "uuid": "1c8f1cad-e4f7-48e4-8b5a-7f7fc32c5ac0",
                  "parentUUID": "8ba5c2fa-9477-4edf-828f-47e5856f01f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method signatures should have error and data properties even if you dont pass any parameter",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have error and data properties even if you dont pass any parameter",
                  "timedOut": null,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var signature = utils.createMethodSignature();\n_assert[\"default\"].equal(signature.data, null);\n_assert[\"default\"].equal(signature.error, null);\ndone();",
                  "err": {},
                  "uuid": "2bbbee8f-a8e5-42f6-916c-cc1ca31a0552",
                  "parentUUID": "8ba5c2fa-9477-4edf-828f-47e5856f01f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd7db7c1-d490-4895-bf7a-4e2c3661e3fb",
                "1c8f1cad-e4f7-48e4-8b5a-7f7fc32c5ac0",
                "2bbbee8f-a8e5-42f6-916c-cc1ca31a0552"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 63,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a1e2c56-7601-4848-8c25-1dd2d0fd28ae",
              "title": "UUID: utils.uuid() -> Generate an Universally unique identifier string",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "uuid() must have 36 length",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string uuid() must have 36 length",
                  "timedOut": null,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var uuid1 = utils.uuid();\nvar uuid2 = utils.uuid();\n_assert[\"default\"].equal(uuid1.length, 36);\n_assert[\"default\"].equal(uuid2.length, 36);\ndone();",
                  "err": {},
                  "uuid": "4cbb7e74-d7e7-4570-95f7-8afa83353c8b",
                  "parentUUID": "1a1e2c56-7601-4848-8c25-1dd2d0fd28ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid() getter must return a 36 bytes string",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string uuid() getter must return a 36 bytes string",
                  "timedOut": null,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var uuid1 = utils.uuid();\nvar bytes = new Blob([uuid1]).size;\n_assert[\"default\"].equal(bytes, 36);\ndone();",
                  "err": {},
                  "uuid": "1bff2ab1-0128-4000-98b5-2a09064259f4",
                  "parentUUID": "1a1e2c56-7601-4848-8c25-1dd2d0fd28ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Generates 10,000 uuids and check collisions",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string Generates 10,000 uuids and check collisions",
                  "timedOut": null,
                  "duration": 56,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var arr = [];\nfor (var x = 0; x <= 10000; x++) {\n  var uuid = utils.uuid();\n  arr.push(uuid);\n}\nvar map = arr.reduce(function (acc, e) {\n  return acc.set(e, (acc.get(e) || 0) + 1);\n}, new Map());\nvar oneOcurrency = 1;\nvar similars = (0, _toConsumableArray2[\"default\"])(map.values()).filter(function (value) {\n  return value > oneOcurrency;\n}).length;\n_assert[\"default\"].equal(similars, 0);\ndone();",
                  "err": {},
                  "uuid": "437d8ce4-7fe3-440e-a7b5-5358467bd257",
                  "parentUUID": "1a1e2c56-7601-4848-8c25-1dd2d0fd28ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4cbb7e74-d7e7-4570-95f7-8afa83353c8b",
                "1bff2ab1-0128-4000-98b5-2a09064259f4",
                "437d8ce4-7fe3-440e-a7b5-5358467bd257"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f35866f6-849b-4e6b-ba63-f538de1d83a3",
              "title": "toJSON: utils.toJSON(string|object) -> stringify and parse an object",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "toJSON() must support Strings",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() must support Strings",
                  "timedOut": null,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var obj = '{ \"name\": \"eduardo\" }';\nvar json = utils.toJSON(obj);\n_assert[\"default\"].equal(json.name, 'eduardo');\ndone();",
                  "err": {},
                  "uuid": "9b9cb07f-2e84-4168-8bba-75194698082d",
                  "parentUUID": "f35866f6-849b-4e6b-ba63-f538de1d83a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "toJSON() Strings must be valid JSON string",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() Strings must be valid JSON string",
                  "timedOut": null,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var obj = '{ name: \"eduardo\" }';\nvar json = {};\ntry {\n  json = utils.toJSON(obj);\n} catch (error) {\n  json = {};\n}\n_assert[\"default\"].notEqual(json.name, 'eduardo');\ndone();",
                  "err": {},
                  "uuid": "867764a0-fe3d-483f-9e22-05ed504d4073",
                  "parentUUID": "f35866f6-849b-4e6b-ba63-f538de1d83a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "toJSON() must support Object",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() must support Object",
                  "timedOut": null,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var obj = {\n  name: 'eduardo'\n};\nvar json = utils.toJSON(obj);\n_assert[\"default\"].equal(json.name, 'eduardo');\ndone();",
                  "err": {},
                  "uuid": "8e3a06c1-2de9-4d3b-9c29-372445d1f317",
                  "parentUUID": "f35866f6-849b-4e6b-ba63-f538de1d83a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b9cb07f-2e84-4168-8bba-75194698082d",
                "867764a0-fe3d-483f-9e22-05ed504d4073",
                "8e3a06c1-2de9-4d3b-9c29-372445d1f317"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 45,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40cde951-5a2e-412f-ad0f-31b06fd537e1",
              "title": "Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Table config must have __id as Primary Key",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config Table config must have __id as Primary Key",
                  "timedOut": null,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tableConfigArray = tableConfig.split(',');\n_assert[\"default\"].equal(tableConfigArray[0], '++__id');\ndone();",
                  "err": {},
                  "uuid": "edb07e8c-6c62-44fd-98c0-4fb08c14ddb7",
                  "parentUUID": "40cde951-5a2e-412f-ad0f-31b06fd537e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Table config must have _id ",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config Table config must have _id ",
                  "timedOut": null,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tableConfigArray = tableConfig.split(',');\n_assert[\"default\"].equal(tableConfigArray[1], '_id');\ndone();",
                  "err": {},
                  "uuid": "a19efc90-b2b8-4e5c-a1b1-38b91806ca90",
                  "parentUUID": "40cde951-5a2e-412f-ad0f-31b06fd537e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cards property must be multi entry",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config cards property must be multi entry",
                  "timedOut": null,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tableConfigArray = tableConfig.split(',');\nvar foundMultiEntry = false;\ntableConfigArray.forEach(function (propertyName) {\n  if (propertyName === '*cards') {\n    foundMultiEntry = true;\n  }\n});\n_assert[\"default\"].equal(foundMultiEntry, true);\ndone();",
                  "err": {},
                  "uuid": "f0a2771c-765c-49a4-829b-1deeed9d6a05",
                  "parentUUID": "40cde951-5a2e-412f-ad0f-31b06fd537e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "notIndexed property shall not be present on table config because it is not indexed",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config notIndexed property shall not be present on table config because it is not indexed",
                  "timedOut": null,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tableConfigArray = tableConfig.split(',');\nvar foundnotIndexed = false;\ntableConfigArray.forEach(function (propertyName) {\n  if (propertyName === 'notIndexed') {\n    foundnotIndexed = true;\n  }\n});\n_assert[\"default\"].equal(foundnotIndexed, false);\ndone();",
                  "err": {},
                  "uuid": "f3b158a5-5c33-46ea-973f-fcf35b026b49",
                  "parentUUID": "40cde951-5a2e-412f-ad0f-31b06fd537e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edb07e8c-6c62-44fd-98c0-4fb08c14ddb7",
                "a19efc90-b2b8-4e5c-a1b1-38b91806ca90",
                "f0a2771c-765c-49a4-829b-1deeed9d6a05",
                "f3b158a5-5c33-46ea-973f-fcf35b026b49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 58,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6cb36229-f3e8-4f35-bac2-5405be708d52",
              "title": "lunr search token generating",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Returned token must be an array",
                  "fullTitle": "#--- Utils module Test Suite lunr search token generating Returned token must be an array",
                  "timedOut": null,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = null;\nvar _data = null;\ntry {\n  var text = 'text goes here';\n  var token = utils.getSearchTokenStream(text);\n  _data = token;\n} catch (e) {\n  console.log(e);\n  _error = e;\n  _data = null;\n}\n_assert[\"default\"].equal(Array.isArray(_data), true);\ndone();",
                  "err": {},
                  "uuid": "b01558cb-4395-40b3-929c-0ff6acc39e8e",
                  "parentUUID": "6cb36229-f3e8-4f35-bac2-5405be708d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Returned token must have 3 entries",
                  "fullTitle": "#--- Utils module Test Suite lunr search token generating Returned token must have 3 entries",
                  "timedOut": null,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = null;\nvar _data = null;\ntry {\n  var text = 'text goes here';\n  var token = utils.getSearchTokenStream(text);\n  _data = token;\n} catch (e) {\n  console.log(e);\n  _error = e;\n  _data = null;\n}\n_assert[\"default\"].equal(_data.length, 3);\ndone();",
                  "err": {},
                  "uuid": "671f281e-0b36-4a93-b6ce-05d95842b0e2",
                  "parentUUID": "6cb36229-f3e8-4f35-bac2-5405be708d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Returned token must have 0 entries",
                  "fullTitle": "#--- Utils module Test Suite lunr search token generating Returned token must have 0 entries",
                  "timedOut": null,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = null;\nvar _data = null;\ntry {\n  var text = '';\n  var token = utils.getSearchTokenStream(text);\n  _data = token;\n} catch (e) {\n  console.log(e);\n  _error = e;\n  _data = null;\n}\n_assert[\"default\"].equal(_data.length, 0);\ndone();",
                  "err": {},
                  "uuid": "eb70cd9b-eb57-42a4-be17-635a1f8e36d4",
                  "parentUUID": "6cb36229-f3e8-4f35-bac2-5405be708d52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b01558cb-4395-40b3-929c-0ff6acc39e8e",
                "671f281e-0b36-4a93-b6ce-05d95842b0e2",
                "eb70cd9b-eb57-42a4-be17-635a1f8e36d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 35,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index.html",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "docs/reports/unit-testing",
        "overwrite": true,
        "reportTitle": "My Custom Title",
        "showPassed": true,
        "html": true,
        "json": true,
        "charts": true,
        "reportFilename": "index.html"
      },
      "version": "5.1.0"
    }
  }
}