{
  "stats": {
    "suites": 6,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-14T02:42:45.454Z",
    "end": "2021-02-14T02:42:45.910Z",
    "duration": 456,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e54bf17e-345e-407c-a7e5-598e890b3a82",
      "title": "",
      "fullFile": "cypress/integration/utils_spec.js",
      "file": "cypress/integration/utils_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d561fba4-b84f-4287-a3ba-49170028487f",
          "title": "#--- Utils module Test Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c1b234e2-c927-48d1-88ba-c2ca678b1130",
              "title": "Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "method signatures should have at least 2 data properties",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have at least 2 data properties",
                  "timedOut": null,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = 'fake error';\nvar _data = 'fake data';\nvar signature = utils.createMethodSignature(_error, _data);\n_assert[\"default\"].equal(Object.keys(signature).length, 2);\ndone();",
                  "err": {},
                  "uuid": "60c24d21-1208-4de2-9933-de582d72db00",
                  "parentUUID": "c1b234e2-c927-48d1-88ba-c2ca678b1130",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method signatures should have error and data properties",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have error and data properties",
                  "timedOut": null,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = 'fake error';\nvar _data = 'fake data';\nvar signature = utils.createMethodSignature(_error, _data);\n_assert[\"default\"].equal(signature.data, _data);\n_assert[\"default\"].equal(signature.error, _error);\ndone();",
                  "err": {},
                  "uuid": "ca83ed90-c433-433b-98a0-689819eae25a",
                  "parentUUID": "c1b234e2-c927-48d1-88ba-c2ca678b1130",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method signatures should have error and data properties even if you dont pass any parameter",
                  "fullTitle": "#--- Utils module Test Suite Method Signatures: utils.createMethodSignature(error: string|object, data: string|object|array|boolean) -> Create default signature method object method signatures should have error and data properties even if you dont pass any parameter",
                  "timedOut": null,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var signature = utils.createMethodSignature();\n_assert[\"default\"].equal(signature.data, null);\n_assert[\"default\"].equal(signature.error, null);\ndone();",
                  "err": {},
                  "uuid": "aedc2aac-3f4d-456d-b2bc-787f1c79ab55",
                  "parentUUID": "c1b234e2-c927-48d1-88ba-c2ca678b1130",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60c24d21-1208-4de2-9933-de582d72db00",
                "ca83ed90-c433-433b-98a0-689819eae25a",
                "aedc2aac-3f4d-456d-b2bc-787f1c79ab55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 63,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c40a2d60-3086-47e4-adac-6b2275564d0e",
              "title": "UUID: utils.uuid() -> Generate an Universally unique identifier string",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "uuid() must have 36 length",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string uuid() must have 36 length",
                  "timedOut": null,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var uuid1 = utils.uuid();\nvar uuid2 = utils.uuid();\n_assert[\"default\"].equal(uuid1.length, 36);\n_assert[\"default\"].equal(uuid2.length, 36);\ndone();",
                  "err": {},
                  "uuid": "4ce6b204-3c89-448e-a153-96c7c7b3d305",
                  "parentUUID": "c40a2d60-3086-47e4-adac-6b2275564d0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid() getter must return a 36 bytes string",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string uuid() getter must return a 36 bytes string",
                  "timedOut": null,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var uuid1 = utils.uuid();\nvar bytes = new Blob([uuid1]).size;\n_assert[\"default\"].equal(bytes, 36);\ndone();",
                  "err": {},
                  "uuid": "b91588d6-2e98-46db-af51-2c9b8ab8d833",
                  "parentUUID": "c40a2d60-3086-47e4-adac-6b2275564d0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Generates 10,000 uuids and check collisions",
                  "fullTitle": "#--- Utils module Test Suite UUID: utils.uuid() -> Generate an Universally unique identifier string Generates 10,000 uuids and check collisions",
                  "timedOut": null,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var arr = [];\nfor (var x = 0; x <= 10000; x++) {\n  var uuid = utils.uuid();\n  arr.push(uuid);\n}\nvar map = arr.reduce(function (acc, e) {\n  return acc.set(e, (acc.get(e) || 0) + 1);\n}, new Map());\nvar oneOcurrency = 1;\nvar similars = (0, _toConsumableArray2[\"default\"])(map.values()).filter(function (value) {\n  return value > oneOcurrency;\n}).length;\n_assert[\"default\"].equal(similars, 0);\ndone();",
                  "err": {},
                  "uuid": "1bfc54af-73ef-45bd-855b-8a86d9e5454b",
                  "parentUUID": "c40a2d60-3086-47e4-adac-6b2275564d0e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ce6b204-3c89-448e-a153-96c7c7b3d305",
                "b91588d6-2e98-46db-af51-2c9b8ab8d833",
                "1bfc54af-73ef-45bd-855b-8a86d9e5454b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81997b12-c527-4e64-ae66-61a5c6237f06",
              "title": "toJSON: utils.toJSON(string|object) -> stringify and parse an object",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "toJSON() must support Strings",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() must support Strings",
                  "timedOut": null,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var obj = '{ \"name\": \"eduardo\" }';\nvar json = utils.toJSON(obj);\n_assert[\"default\"].equal(json.name, 'eduardo');\ndone();",
                  "err": {},
                  "uuid": "e3030073-c421-451d-8135-3dcdb5bcdd4e",
                  "parentUUID": "81997b12-c527-4e64-ae66-61a5c6237f06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "toJSON() Strings must be valid JSON string",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() Strings must be valid JSON string",
                  "timedOut": null,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var obj = '{ name: \"eduardo\" }';\nvar json = {};\ntry {\n  json = utils.toJSON(obj);\n} catch (error) {\n  json = {};\n}\n_assert[\"default\"].notEqual(json.name, 'eduardo');\ndone();",
                  "err": {},
                  "uuid": "17846d7e-f096-4f09-aee5-b7c9bd5091a4",
                  "parentUUID": "81997b12-c527-4e64-ae66-61a5c6237f06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "toJSON() must support Object",
                  "fullTitle": "#--- Utils module Test Suite toJSON: utils.toJSON(string|object) -> stringify and parse an object toJSON() must support Object",
                  "timedOut": null,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var obj = {\n  name: 'eduardo'\n};\nvar json = utils.toJSON(obj);\n_assert[\"default\"].equal(json.name, 'eduardo');\ndone();",
                  "err": {},
                  "uuid": "a7758050-0157-450c-961a-299b98c8b99e",
                  "parentUUID": "81997b12-c527-4e64-ae66-61a5c6237f06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3030073-c421-451d-8135-3dcdb5bcdd4e",
                "17846d7e-f096-4f09-aee5-b7c9bd5091a4",
                "a7758050-0157-450c-961a-299b98c8b99e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 32,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53373c2d-f7ab-4184-9c65-46d4e4c4200c",
              "title": "Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Table config must have __id as Primary Key",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config Table config must have __id as Primary Key",
                  "timedOut": null,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tableConfigArray = tableConfig.split(',');\n_assert[\"default\"].equal(tableConfigArray[0], '++__id');\ndone();",
                  "err": {},
                  "uuid": "04ee25a6-7740-49c7-a6f9-8ee1ed529420",
                  "parentUUID": "53373c2d-f7ab-4184-9c65-46d4e4c4200c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Table config must have _id ",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config Table config must have _id ",
                  "timedOut": null,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tableConfigArray = tableConfig.split(',');\n_assert[\"default\"].equal(tableConfigArray[1], '_id');\ndone();",
                  "err": {},
                  "uuid": "92a3dbe5-9090-44ff-86d8-8c38eb5e6d90",
                  "parentUUID": "53373c2d-f7ab-4184-9c65-46d4e4c4200c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cards property must be multi entry",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config cards property must be multi entry",
                  "timedOut": null,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tableConfigArray = tableConfig.split(',');\nvar foundMultiEntry = false;\ntableConfigArray.forEach(function (propertyName) {\n  if (propertyName === '*cards') {\n    foundMultiEntry = true;\n  }\n});\n_assert[\"default\"].equal(foundMultiEntry, true);\ndone();",
                  "err": {},
                  "uuid": "bc77fff7-397d-4a25-853e-77ec390be738",
                  "parentUUID": "53373c2d-f7ab-4184-9c65-46d4e4c4200c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "notIndexed property shall not be present on table config because it is not indexed",
                  "fullTitle": "#--- Utils module Test Suite Mongoose 2 Dexie: utils.mongooseToDexieTableString(schema) -> Mongoose schema conversion to Dexie table config notIndexed property shall not be present on table config because it is not indexed",
                  "timedOut": null,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tableConfigArray = tableConfig.split(',');\nvar foundnotIndexed = false;\ntableConfigArray.forEach(function (propertyName) {\n  if (propertyName === 'notIndexed') {\n    foundnotIndexed = true;\n  }\n});\n_assert[\"default\"].equal(foundnotIndexed, false);\ndone();",
                  "err": {},
                  "uuid": "9e4a8a35-c650-475a-b5d1-9f6cf53a460b",
                  "parentUUID": "53373c2d-f7ab-4184-9c65-46d4e4c4200c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04ee25a6-7740-49c7-a6f9-8ee1ed529420",
                "92a3dbe5-9090-44ff-86d8-8c38eb5e6d90",
                "bc77fff7-397d-4a25-853e-77ec390be738",
                "9e4a8a35-c650-475a-b5d1-9f6cf53a460b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 58,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2f04c6a1-d2d6-4c83-b2af-e7dda469560e",
              "title": "lunr search token generating",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Returned token must be an array",
                  "fullTitle": "#--- Utils module Test Suite lunr search token generating Returned token must be an array",
                  "timedOut": null,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = null;\nvar _data = null;\ntry {\n  var text = 'text goes here';\n  var token = utils.getSearchTokenStream(text);\n  _data = token;\n} catch (e) {\n  console.log(e);\n  _error = e;\n  _data = null;\n}\n_assert[\"default\"].equal(Array.isArray(_data), true);\ndone();",
                  "err": {},
                  "uuid": "6a836f06-4d65-488f-b286-93c60fb1f238",
                  "parentUUID": "2f04c6a1-d2d6-4c83-b2af-e7dda469560e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Returned token must have 3 entries",
                  "fullTitle": "#--- Utils module Test Suite lunr search token generating Returned token must have 3 entries",
                  "timedOut": null,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = null;\nvar _data = null;\ntry {\n  var text = 'text goes here';\n  var token = utils.getSearchTokenStream(text);\n  _data = token;\n} catch (e) {\n  console.log(e);\n  _error = e;\n  _data = null;\n}\n_assert[\"default\"].equal(_data.length, 3);\ndone();",
                  "err": {},
                  "uuid": "c954c570-812a-4f4b-9c68-8541aa490b1d",
                  "parentUUID": "2f04c6a1-d2d6-4c83-b2af-e7dda469560e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Returned token must have 0 entries",
                  "fullTitle": "#--- Utils module Test Suite lunr search token generating Returned token must have 0 entries",
                  "timedOut": null,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _error = null;\nvar _data = null;\ntry {\n  var text = '';\n  var token = utils.getSearchTokenStream(text);\n  _data = token;\n} catch (e) {\n  console.log(e);\n  _error = e;\n  _data = null;\n}\n_assert[\"default\"].equal(_data.length, 0);\ndone();",
                  "err": {},
                  "uuid": "b219d44d-935d-4c0a-bcd1-e935c00a5654",
                  "parentUUID": "2f04c6a1-d2d6-4c83-b2af-e7dda469560e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a836f06-4d65-488f-b286-93c60fb1f238",
                "c954c570-812a-4f4b-9c68-8541aa490b1d",
                "b219d44d-935d-4c0a-bcd1-e935c00a5654"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 41,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index.html",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "docs/reports/unit-testing",
        "overwrite": true,
        "reportTitle": "My Custom Title",
        "showPassed": true,
        "html": true,
        "json": true,
        "charts": true,
        "reportFilename": "index.html"
      },
      "version": "5.1.0"
    }
  }
}